# -*- coding: utf-8 -*-
"""dag

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T0wF8SsySYqKrJWdGR879QykKsMqo2gW
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.models import DAG, Variable
from airflow.operators.dummy import DummyOperator
from airflow.operators.python_operator import PythonOperator
from airflow.providers.postgres.operators.postgres import PostgresOperator
import smtplib

from scripts.flight_prices import load_flight_prices_data

def enviar():
    try:
        x = smtplib.SMTP('smtp.gmail.com', 587)
        x.starttls()
        x.login('lucasforesto89@gmail.com', Variable.get ('gmail_secret'))
        subject = 'Aviso de Vuelos'
        body_text = 'Los datos han sido actualizados'
        message = 'Subject: {}\n\n{}'.format(subject, body_text)
        x.sendmail('lucasforesto89@gmail.com', 'lucasforesto89@gmail.com', message)
        print('Email enviado con Ã©xito')
    except Exception as exception:
        print(exception)
        print('Email ha fallado')


default_args = {
    "retries": 3,
    "retry_delay": timedelta(minutes=1)
}
with DAG(
    dag_id="dag_final",
    start_date=datetime(2023, 12, 19),
    catchup=False,
    schedule_interval="30 * * * *",
    default_args=default_args
) as dag:
    # task con dummy operator
    dummy_start_task = DummyOperator(
        task_id="start"
    )
    load_flight_prices_data_task = PythonOperator(
        task_id="load_flight_prices_data",
        python_callable=load_flight_prices_data,
        op_kwargs={
             "config_file": "/opt/airflow/config/config.ini"
        }
    )

    send_email_task = PythonOperator(
        task_id="send_email",
        python_callable=enviar
    )


    dummy_end_task = DummyOperator(
        task_id="end"
    )
    dummy_start_task >> load_flight_prices_data_task
    load_flight_prices_data_task >> send_email_task
    send_email_task >> dummy_end_task

